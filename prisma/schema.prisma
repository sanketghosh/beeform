// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sex {
  Male
  Female
}

enum BodyFatCategory {
  ULTRA_LEAN
  VERY_LEAN
  LEAN
  MODERATELY_LEAN
  HEALTHY
  MODERATELY_OVERWEIGHT
  OVERWEIGHT
  OBESE
  EXTREMELY_OBESE
}

enum FitnessGoal {
  BURN_FATS
  CARDIOVASCULAR_HEALTH
  BUILD_MUSCLE
}

enum ActivityLevel {
  ZERO_MOVEMENTS
  FEW_MOVEMENTS
  MODERATELY_ACTIVE
  VERY_ACTIVE
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  programInformation ProgramInformation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model ProgramInformation {
  id                String          @id @default(cuid())
  name              String
  age               Int
  sex               Sex
  height            Float
  weight            Float
  usedMeasuringTape Boolean         @default(false)
  neck              Float
  waist             Float
  bodyFatCategory   BodyFatCategory
  fitnessGoal       FitnessGoal
  workoutDays       Int
  activityLevel     ActivityLevel
  uniqueUrlId       String          @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("program_information")
}
